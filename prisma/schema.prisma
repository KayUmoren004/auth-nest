// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role Enum
enum Role {
  ADMIN
  USER
}

// Season Enum
enum Season {
  FALL
  WINTER
  SPRING
  SUMMER
}

// Division Enum
enum Division {
  VARSITY
  JV
  FRESHMAN
  BEGINNER
  INTERMEDIATE
  ADVANCED
  OPEN
}

// Winner Enum
enum Winner {
  HOME
  AWAY
  TIE
}

// Contact Model
model Contact {
  id        String   @id @default(uuid())
  phone     String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String   @unique
}

// Domain Model
model Domain {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  domain    String
  slug      String
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String   @unique
}

// School Model
model School {
  id              String   @id @default(uuid())
  name            String
  location        String
  logoUrl         String
  establishedDate DateTime
  contact         Contact?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           User[]
  domain          Domain?
  sports          Sport[]
}

// User Model
model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       String   @default("USER")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastLogin  DateTime @default(now())
  school     School?  @relation(fields: [schoolId], references: [id]) // TODO: Make this required
  schoolId   String? // TODO: Make this required
  profile    Profile?
  player     Player[]
  signUpDate DateTime @default(now())
  captain    Team[]
  blurhash   String?
  avatarUrl  String?
}

// Profile Model
model Profile {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  bio           String?
  emailVerified Boolean  @default(false)
  username      String   @unique
}

// Sport Model
model Sport {
  id          String          @id @default(uuid())
  schoolId    String
  School      School          @relation(fields: [schoolId], references: [id])
  name        String          @unique
  season      String
  description String
  rulesUrl    String
  leagues     League[]
  status      String          @default("Active")
  settings    SportSettings[]
}

// Sport Settings Model
model SportSettings {
  id       Int     @id @default(autoincrement())
  sportId  String
  sport    Sport   @relation(fields: [sportId], references: [id])
  name     String
  value    String
  required Boolean
}

// League Model
model League {
  id          String           @id @default(uuid())
  sportId     String
  sport       Sport?           @relation(fields: [sportId], references: [id])
  name        String           @unique
  division    String
  startDate   DateTime
  endDate     DateTime
  teams       Team[]
  settings    LeagueSettings[]
  fixtures    Fixtures[]
  standings   Standings[]
  games       Game[]
  soccerTable SoccerTable[]
}

// league settings model
model LeagueSettings {
  id       Int     @id @default(autoincrement())
  leagueId String
  league   League  @relation(fields: [leagueId], references: [id])
  name     String  @unique
  value    Json
  required Boolean
}

// Team Model
model Team {
  id           String           @id @default(uuid())
  leagueId     String?
  league       League?          @relation(fields: [leagueId], references: [id])
  name         String           @unique
  captainId    String?
  captain      User?            @relation(fields: [captainId], references: [id])
  logoUrl      String
  wins         Int?             @default(0)
  losses       Int?             @default(0)
  ties         Int?             @default(0)
  players      Player[]
  games        Game[]
  settings     TeamSettings[]
  homeTeamType HomeTeamType?
  awayTeamType AwayTeamType?
  shortName    String?
  standings    Standings[]
  soccerTable  SoccerTable[]
  attendance   GameAttendance[]
}

// Team Settings Model
model TeamSettings {
  id       Int     @id @default(autoincrement())
  teamId   String
  team     Team    @relation(fields: [teamId], references: [id])
  name     String
  value    String
  required Boolean
}

// Player Model
model Player {
  id           String           @id @default(uuid())
  teamId       String
  team         Team             @relation(fields: [teamId], references: [id])
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  position     String
  jerseyNumber Int
  attendance   GameAttendance[]
}

// Game Model
model Game {
  id               String          @id @default(uuid())
  homeId           String
  awayId           String
  teams            Team[]
  settings         GameSettings[]
  leagueId         String
  league           League          @relation(fields: [leagueId], references: [id])
  fixture          Fixtures?
  roster           Json?
  attendance       GameAttendance[]
}

// Game Attendance Model
model GameAttendance {
  id       String  @id @default(uuid())
  gameId   String
  teamId   String
  team     Team    @relation(fields: [teamId], references: [id])
  playerId String
  player   Player  @relation(fields: [playerId], references: [id])
  attended Boolean
  game     Game[]
}

// Game Settings Model
model GameSettings {
  id       Int     @id @default(autoincrement())
  gameId   String
  game     Game    @relation(fields: [gameId], references: [id])
  name     String
  value    String
  required Boolean
}

// Team Type Model
model HomeTeamType {
  id         String     @id @default(uuid())
  logo       String
  name       String
  homeTeamId String     @unique
  team       Team       @relation(fields: [homeTeamId], references: [id])
  type       String
  fixtures   Fixtures[]
}

model AwayTeamType {
  id         String     @id @default(uuid())
  logo       String
  name       String
  awayTeamId String     @unique
  team       Team       @relation(fields: [awayTeamId], references: [id])
  type       String
  fixtures   Fixtures[]
}

// Result Model
model Results {
  id        String   @id @default(uuid())
  homeId    String
  awayId    String
  winner    String
  homeScore Int
  awayScore Int
  fixtures  Fixtures @relation(fields: [fixtureId], references: [id])
  fixtureId String   @unique
}

// Fixture Model
model Fixtures {
  id            String       @id @default(uuid())
  homeTeam      HomeTeamType @relation(fields: [homeFixtureId], references: [id])
  awayTeam      AwayTeamType @relation(fields: [awayFixtureId], references: [id])
  result        Results?
  homeFixtureId String
  awayFixtureId String
  date          DateTime
  leagueId      String
  league        League       @relation(fields: [leagueId], references: [id])
  gameId        String       @unique
  game          Game         @relation(fields: [gameId], references: [id])
}

model Standings {
  id          Int    @id @default(autoincrement())
  leagueId    String @unique
  league      League @relation(fields: [leagueId], references: [id])
  teamId      String @unique
  team        Team   @relation(fields: [teamId], references: [id])
  sportTypeId String @unique
  sportType   String
}

model SoccerTable {
  id             String @id @default(uuid())
  played         Int
  wins           Int
  draws          Int
  loss           Int
  goalsFor       Int
  goalsAgainst   Int
  goalDifference Int
  points         Int
  position       Int
  teamId         String @unique
  team           Team   @relation(fields: [teamId], references: [id])
  leagueId       String
  league         League @relation(fields: [leagueId], references: [id])
}

model VolleyballTable {
  id       String @id @default(uuid())
  played   Int
  wins     Int
  draws    Int
  loss     Int
  points   Int
  position Int
}
